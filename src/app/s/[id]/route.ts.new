import { NextRequest, NextResponse } from "next/server";
import db from "@/lib/db";

// Function to handle debug logging
function logDebug(message: string, data?: any) {
  if (process.env.NODE_ENV !== 'production') {
    if (data) {
      console.log(message, data);
    } else {
      console.log(message);
    }
  }
}

// Function to handle error logging
function logError(message: string, error?: any) {
  if (process.env.NODE_ENV !== 'production') {
    if (error) {
      console.error(message, error);
    } else {
      console.error(message);
    }
  }
}

// Function to ensure URL has protocol
function ensureUrlProtocol(url: string): string {
  if (!url.startsWith('http://') && !url.startsWith('https://')) {
    return `https://${url}`;
  }
  return url;
}

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const shortCode = params.id;
    
    if (!shortCode) {
      logError("No shortCode provided in slug");
      return NextResponse.redirect(new URL("/", request.url));
    }

    logDebug(`Redirect request: URL=${request.url}, shortCode=${shortCode}`);
    
    // Look up the shortlink by the shortlink code
    const link = await db.getShortlinkBySlug(shortCode);
    
    if (!link) {
      logError(`No link found for shortCode: ${shortCode}`);
      return NextResponse.redirect(new URL("/", request.url));
    }
    
    logDebug(`Found link for ${shortCode}:`, link);
    
    // Update click count
    await db.incrementClicks(shortCode);
    
    // Make sure the longlink has a protocol
    const targetUrl = ensureUrlProtocol(link.longlink);
    
    logDebug(`Redirecting to: ${targetUrl}`);
    return NextResponse.redirect(new URL(targetUrl));
    
  } catch (error) {
    logError("Error in redirect:", error);
    return NextResponse.redirect(new URL("/", request.url));
  }
}

// Set revalidation to improve performance
export const dynamic = "force-dynamic";
